(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{372:function(v,_,t){"use strict";t.r(_);var n=t(25),s=Object(n.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"js-设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-设计模式"}},[v._v("#")]),v._v(" JS 设计模式")]),v._v(" "),t("p",[v._v("【设计模式】")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("模式是一种可服用的解决方案，可用于解决设计中常遇到的常见问题，如在我们编写的JS应用程序的实例中。另一种模式的方式是解决问题的方法制作成模板，并且这些模板可应用于多种不同的情况。")])]),v._v(" "),t("li",[t("p",[v._v("为什么了解和熟悉模式很重要？")])])]),v._v(" "),t("p",[v._v("【设计模式的三大好处】")]),v._v(" "),t("p",[v._v("【模式是已验证的解决方案】\n他们为解决软件开发中遇到的问题提供可靠的方法，也就是使用已验证的解决方案，这些解决方案体现了开发人员的经验及见解，他们未定义和改进这些方法提供了帮助，从而形成了现在的模式。")]),v._v(" "),t("p",[v._v("【模式很容易被复用】\n模式通常是指一种立即可用的解决方案，可以对其进行修改以满足个人需求。该特性使得这些模式的功能非常强大。")]),v._v(" "),t("p",[v._v("【模式富有表达力】\n看到模式是，通常就表示有一个设置好的结构和表达解决方案的词汇，一帮猪我们非常轻松的表达出所实现的大型解决方案。")]),v._v(" "),t("p",[v._v("模式不是一种确切的解决方案。重要的是，我们要知道模式的作用仅仅是为我们提供一个解决问题的方案。模式无法解决所有的设计问题，也无法取代优秀软件设计师的工作，但模式确实能够支持这些工作。接下来我们将了解一下模式的其他一些优点。")]),v._v(" "),t("p",[t("em",[v._v("复用模式有助于防止在应用程序开发过程中小问题引发的大问题")]),v._v("。\n这意味着我们在已经验证的模式基础上编写代码时，可以在代码上少花点时间，从而有更多的时间专注于整体解决方案的质量。这是因为模式支持我们用更结构化和更有组织性的方式编写代码，从而避免以后因为代码的整洁性问题而重构代码。")]),v._v(" "),t("p",[t("strong",[v._v("模式可以提供通用的解决方案，并且其记录方式不需要与某个特定问题挂钩。")]),v._v("\n这种通用的方法意味着不管现在开发的是哪种应用程序（在许多情况下是指编程语言），设计模式都可以用于改进代码的结构。")]),v._v(" "),t("p",[t("strong",[v._v("某些模式确实能够通过避免代码复用来减少代码的总体资源占用量")]),v._v("\n通过鼓励开发人员更密切的关注解决方案中可以即刻减少代码复用的部分，例如，减少类似处理过程的函数数量，用一个广义函数取而代之，那么就可以减小代码库的总大小。这也就是所谓的使代码更加简洁。")]),v._v(" "),t("p",[t("strong",[v._v("模式添加到开发人员的词汇中，会使沟通更快速。")])]),v._v(" "),t("p",[t("strong",[v._v("经常使用的模式可以逐步改进，因为其他开发人员使用这些模式后总结出的共同经验又贡献给了设计模式社区。")])])])}),[],!1,null,null,null);_.default=s.exports}}]);